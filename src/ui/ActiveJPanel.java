/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarList;

/**
 *
 * @author Varakumar
 */
public class ActiveJPanel extends javax.swing.JPanel {
    
    CarList list;

    /**
     * Creates new form ActiveJPanel
     */
    public ActiveJPanel(CarList list) {
        initComponents();
        this.list = list;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblActive = new javax.swing.JTable();
        lblInactiveNumber = new javax.swing.JLabel();
        txtActiveNumber = new javax.swing.JTextField();
        lblInactibenumber = new javax.swing.JLabel();
        txtiInactiveNumber = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblManufacturer = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtManu = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtMaxSeats = new javax.swing.JTextField();
        txtMaintainence = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        lblTable = new javax.swing.JLabel();
        btnMaintainence = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lstManufacturer = new javax.swing.JComboBox<>();
        btnManusearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtSearchCity = new javax.swing.JTextField();
        btnManusearch1 = new javax.swing.JButton();
        lstYear = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtSearchmodel = new javax.swing.JTextField();
        btnModelno = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnSerial = new javax.swing.JButton();
        txtSearchserial = new javax.swing.JTextField();
        btnSearchYear = new javax.swing.JButton();
        lstMinseats = new javax.swing.JComboBox<>();
        lstMaxseats = new javax.swing.JComboBox<>();
        lblmin = new javax.swing.JLabel();
        lblmax = new javax.swing.JLabel();
        btnSeats = new javax.swing.JButton();
        lblLastUpdate = new javax.swing.JLabel();
        txtLastupdate = new javax.swing.JTextField();

        setAutoscrolls(true);
        setPreferredSize(new java.awt.Dimension(2000, 2000));

        tblActive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Status", "Serial no.", "Updated last"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblActive.setMaximumSize(new java.awt.Dimension(2147483, 64));
        tblActive.setPreferredSize(new java.awt.Dimension(4500, 64));
        tblActive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblActiveMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblActive);

        lblInactiveNumber.setText("Number of Active Cars:");

        lblInactibenumber.setText("Number of inactive cars:");

        txtiInactiveNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtiInactiveNumberActionPerformed(evt);
            }
        });

        lblCity.setText("City:");

        lblManufacturer.setText("Manufacturer:");

        lblYear.setText("Year of manufacture:");

        jLabel1.setText("Max-seats:");

        jLabel2.setText("Maintainence certificate status:");

        jLabel3.setText("Model number:");

        txtMaxSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSeatsActionPerformed(evt);
            }
        });

        txtMaintainence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaintainenceActionPerformed(evt);
            }
        });

        lblTable.setText("Active cars list");

        btnMaintainence.setText("Expired maintainence certificates");
        btnMaintainence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaintainenceActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel4.setText("Click to see all cars with expired maintainence certificate ");

        lstManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Toyota", "Honda", "GM", "Mazda", "Ford", "Nissan","Fiat","Audi","BMW","Daimler AG","Hyundai","Tesla","Range Rover","Volkswagen"}));
        lstManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstManufacturerActionPerformed(evt);
            }
        });

        btnManusearch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnManusearch.setText("Search");
        btnManusearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManusearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter city");

        txtSearchCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCityActionPerformed(evt);
            }
        });

        btnManusearch1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnManusearch1.setText("Search");
        btnManusearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManusearch1ActionPerformed(evt);
            }
        });

        lstYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2006", "2007", "2008", "2009","2010", "2011", "2012", "2013","2014","2015","2016","2017","2018","2019","2020","2021" }));

        jLabel6.setText("Enter model no.");

        txtSearchmodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchmodelActionPerformed(evt);
            }
        });

        btnModelno.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnModelno.setText("Search");
        btnModelno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelnoActionPerformed(evt);
            }
        });

        jLabel7.setText("Enter serial no.");

        btnSerial.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnSerial.setText("Search");
        btnSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialActionPerformed(evt);
            }
        });

        txtSearchserial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchserialActionPerformed(evt);
            }
        });

        btnSearchYear.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnSearchYear.setText("Search");
        btnSearchYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchYearActionPerformed(evt);
            }
        });

        lstMinseats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4","5","6","7" }));

        lstMaxseats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4","5","6","7" }));

        lblmin.setText("Enter minimum seats");

        lblmax.setText("Enter maximum seats");

        btnSeats.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnSeats.setText("Search");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        lblLastUpdate.setText("Fleet last updated:");

        txtLastupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastupdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblInactiveNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtActiveNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblInactibenumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtiInactiveNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnManusearch1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lstYear, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearchYear))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(btnModelno)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtSearchmodel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(2, 2, 2))
                                        .addComponent(btnSerial)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtSearchserial, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lstManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnManusearch)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(lblCity)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMaintainence, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblManufacturer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtManu, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(87, 87, 87))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lblYear)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(34, 34, 34))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(btnMaintainence)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lstMaxseats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblmax))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lstMinseats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblmin))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(btnSeats)))))
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLastUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLastupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInactiveNumber)
                    .addComponent(txtActiveNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInactibenumber)
                    .addComponent(txtiInactiveNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTable)
                    .addComponent(lblLastUpdate)
                    .addComponent(txtLastupdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCity)
                        .addComponent(lstManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnManusearch, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnMaintainence)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lstYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchYear, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(7, 7, 7)
                        .addComponent(btnManusearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(3, 3, 3)
                        .addComponent(btnModelno, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtSearchserial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addComponent(btnSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblManufacturer)
                                    .addComponent(txtManu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblYear)
                                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtMaintainence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lstMinseats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblmin))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lstMaxseats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblmax))
                                .addGap(18, 18, 18)
                                .addComponent(btnSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtiInactiveNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtiInactiveNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtiInactiveNumberActionPerformed

    private void txtMaxSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSeatsActionPerformed

    private void txtMaintainenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaintainenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaintainenceActionPerformed

    private void tblActiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblActiveMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblActive.getModel();
        int selectedIndex = tblActive.getSelectedRow();
        String serial= model.getValueAt(selectedIndex, 1).toString();
        
        for(Car c: list.getCarlist()){
            if(serial.equals(c.getSerial_no())){
                txtCity.setText(c.getCity());
                txtManu.setText(c.getManufacturer());
                txtModel.setText(c.getModel_no());
                txtMaxSeats.setText(Integer.toString(c.getMax_seats()));
                txtYear.setText(Integer.toString(c.getYear()));
                if(c.isMaintain_expiry()){
                    txtMaintainence.setText("Up to date");
                }
                else{
                    
                    txtMaintainence.setText("Expired");
                    
                }
                
                break;
                
                
            }
        }
        
        
        
        
    }//GEN-LAST:event_tblActiveMouseClicked

    private void btnMaintainenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaintainenceActionPerformed
        // TODO add your handling code here:
        
        lblTable.setText("Expired Maintainence List");
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        int flag=0;
        
        for(Car c: list.getCarlist()){
            
            if(!(c.isMaintain_expiry())){
                flag =1;
                
                Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
            
            
        }
        
        if(flag==0){
            
            JOptionPane.showMessageDialog(this, "No cars with expired maintainence!");
           
            
        }
        
        
        
    }//GEN-LAST:event_btnMaintainenceActionPerformed

    private void lstManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstManufacturerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lstManufacturerActionPerformed

    private void btnManusearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManusearchActionPerformed
        // TODO add your handling code here:
        int flag=0;
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        
        String manu = lstManufacturer.getSelectedItem().toString();
        lblTable.setText("Cars manufactured by "+ manu);
        for(Car c: list.getCarlist()){
            if(manu.equals(c.getManufacturer())){
                flag=1;
                
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
        }
        if(flag==0){
            JOptionPane.showMessageDialog(this, "No car manufactured by this manufacturer!");
            
        }
    }//GEN-LAST:event_btnManusearchActionPerformed

    private void txtSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCityActionPerformed

    private void btnManusearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManusearch1ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        if(txtSearchCity.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a city");
            return;
        }
        String city = txtSearchCity.getText();
        lblTable.setText("Cars in "+ city);
        int flag=0;
        for(Car c: list.getCarlist()){
            if(city.equals(c.getCity())){
                
                flag=1;
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
        }
        
        if(flag==0){
            
            JOptionPane.showMessageDialog(this, "No car found in this city!");
            return;
            
        }
    }//GEN-LAST:event_btnManusearch1ActionPerformed

    private void txtSearchmodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchmodelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchmodelActionPerformed

    private void btnModelnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelnoActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        if(txtSearchmodel.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter model number");
            return;
        }
        String mod = txtSearchmodel.getText();
        lblTable.setText("Cars with model number "+ mod);
        int flag=0;
        for(Car c: list.getCarlist()){
            if(mod.equals(c.getModel_no())){
                
                flag=1;
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
        }
        
        if(flag==0){
            
            JOptionPane.showMessageDialog(this, "No car found with this model no.");
         
            
        }
    }//GEN-LAST:event_btnModelnoActionPerformed

    private void btnSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        if(txtSearchserial.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter serial number");
            return;
        }
        String ser = txtSearchserial.getText();
        lblTable.setText("Cars with serial number "+ ser);
        int flag=0;
        for(Car c: list.getCarlist()){
            if(ser.equals(c.getSerial_no())){
                
                flag=1;
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                break;
                
            }
        }
        
        if(flag==0){
            
            JOptionPane.showMessageDialog(this, "No car found with this serial number");
         
            
        }
    }//GEN-LAST:event_btnSerialActionPerformed

    private void txtSearchserialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchserialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchserialActionPerformed

    private void btnSearchYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchYearActionPerformed
        // TODO add your handling code here:
        int flag=0;
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        
        int year = Integer.parseInt(lstYear.getSelectedItem().toString());
        lblTable.setText("Cars manufactured in "+ year);
        for(Car c: list.getCarlist()){
            if(year==c.getYear()){
                flag=1;
                
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
        }
        if(flag==0){
            JOptionPane.showMessageDialog(this, "No car manufactured in this year");
            
        }
        
        
    }//GEN-LAST:event_btnSearchYearActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
        int flag=0;
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        
        int min = Integer.parseInt(lstMinseats.getSelectedItem().toString());
        int max = Integer.parseInt(lstMaxseats.getSelectedItem().toString());
        lblTable.setText("Cars with seats between "+min+" and "+ max );
        for(Car c: list.getCarlist()){
            if(min<=c.getMin_seats() && max==c.getMax_seats()){
                flag=1;
                
                 Object[] row = new Object[3];
                if(c.isAvailability()){
                    
                    row[0]= "Active";
                    
                }
                else{
                    row[0]= "Inactive";
                }

                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
        }
        if(flag==0){
            JOptionPane.showMessageDialog(this, "No car with given seats");
            
        }
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void txtLastupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastupdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastupdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMaintainence;
    private javax.swing.JButton btnManusearch;
    private javax.swing.JButton btnManusearch1;
    private javax.swing.JButton btnModelno;
    private javax.swing.JButton btnSearchYear;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnSerial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblInactibenumber;
    private javax.swing.JLabel lblInactiveNumber;
    private javax.swing.JLabel lblLastUpdate;
    private javax.swing.JLabel lblManufacturer;
    private javax.swing.JLabel lblTable;
    private javax.swing.JLabel lblYear;
    private javax.swing.JLabel lblmax;
    private javax.swing.JLabel lblmin;
    private javax.swing.JComboBox<String> lstManufacturer;
    private javax.swing.JComboBox<String> lstMaxseats;
    private javax.swing.JComboBox<String> lstMinseats;
    private javax.swing.JComboBox<String> lstYear;
    private javax.swing.JTable tblActive;
    private javax.swing.JTextField txtActiveNumber;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtLastupdate;
    private javax.swing.JTextField txtMaintainence;
    private javax.swing.JTextField txtManu;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSearchCity;
    private javax.swing.JTextField txtSearchmodel;
    private javax.swing.JTextField txtSearchserial;
    private javax.swing.JTextField txtYear;
    private javax.swing.JTextField txtiInactiveNumber;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) tblActive.getModel();
        model.setRowCount(0);
        
        for(Car c: list.getCarlist()){
            if(c.isAvailability()){
                Object[] row = new Object[3];
                row[0]= "Active";
                row[1]= c.getSerial_no();
                row[2] = c.getDate();
                model.insertRow(0, row);
                
            }
            
            
        }
        int actCount=0;
        for(Car c: list.getCarlist()){
            if(c.isAvailability()){
                actCount=actCount+1;
            }
        
         
        }
        
        int inactCount= list.getCarlist().size()-actCount;
        txtActiveNumber.setText(Integer.toString(actCount));
        txtiInactiveNumber.setText(Integer.toString(inactCount));
        
        int size = list.getCarlist().size();
        if(size==0){
            return;
        }
        Date date;
        date = list.getCarlist().get(size-1).getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss"); 
        
        for(Car c: list.getCarlist()){
            if(date.before(c.getDate())){
                
                date = c.getDate();
            }
        }
        String strDate = dateFormat.format(date);
        
        
        
        txtLastupdate.setText(strDate);
        
        
}
}
